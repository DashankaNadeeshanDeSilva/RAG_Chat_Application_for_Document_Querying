## Docker compose file to orchestrate fronted and backend docker containers (build and run) ## 
# Docker version
version: "3.8"

# Define multple services to run container together
services:
  # Backend service
  backend:
    build:
      context: ./backend # specify 'backend' dir as build context
      dockerfile: Dockerfile # use the Dockerfile in the backend dir to create the docker image
    container_name: rag-backend # gives container name
    ports:
      - "80:8000"  # Map backend localhost/cloud port 80 to port 8000 in the container (where app is running)
    volumes:
      - ./backend/app:/backend/app # Mount 'backend/app' dir from the host-machine to /RAG_app/app dir in the container for live updates
      - ./uploads:/backend/uploads  # Maps root dir 'uploads' folder to 'RAG_app/uploads' inside the container
    environment:
      - PYTHONUNBUFFERED=1 # Ensures logs are flushed immediately.
      - PYTHONDONTWRITEBYTECODE=1 # Disables the creation of .pyc files to save space.
    restart: unless-stopped # Container restarts automatically unless explicitly stopped.
    #depends_on:
    #  - frontend  # Ensure backend waits for frontend to start
  # Frontend service
  frontend:
    build:
      context: ./frontend # specify 'frontend' dir as build context
      dockerfile: Dockerfile # use the Dockerfile in the frontend dir to create the docker image
    container_name: rag-frontend
    ports:
      - "8080:8080"  # Map frontend localhost port 8080 to HTTP server in container port 8080
    volumes:
      - ./frontend/src:/frontend  # Mount 'frontend/src' dir from the host-machine to /frontend dir in the container for live updates
    restart: unless-stopped # Container restarts automatically unless explicitly stopped.

# Why mounting frontend and backend local machine dirs in 'volumes':
# Allow real-time updates during development, when files are modified/changed in frontend or backend scripts on the host machine
# In devlopment: Changes done to both frontend and backend needs to reflect without rebuilding the Docker image.
# In production: No real-time updates are necessary for either frontend or backend.

# How to run:
# Navigate to the Root Directory: Ensure in the project root (RAG-Chat-Application/). 
# Build and Start Containers: `docker-compose up --build`
# Access the Application: frontend: 'http://localhost:8080'
# Stop All Containers: `docker-compose down`